#------------------------------------------------------------------------------
# IMPORTS

# Native
import json
from urllib.parse import urlencode
from collections import namedtuple

# 3rd party
import requests # http://docs.python-requests.org/
import youtube_dl # https://github.com/rg3/youtube-dl/


#------------------------------------------------------------------------------
# CONSTANTS

YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'verbose': True
}
# Add 'simulate': True to YDL_OPTIONS to prevent actually downloading videos

DOWNLOADED_FILE = 'downloaded.json'
API_FILE = 'api.json'
PLAYLIST_ID = 'PL8mG-RkN2uTw7PhlnAr4pZZz2QubIbujH'
RESULTS_PER_REQUEST = 2
MONTH_NUM = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec"]


#------------------------------------------------------------------------------
# GLOBALS

Video = namedtuple('Video', 'video_id title channel date')


#------------------------------------------------------------------------------
# HELPERS

def format_date(datetime: str) -> str:
    """ Formats a datetime object generated by YouTube as a human-readable date

        Input:  "2016-10-29T20:27:45.000Z"
        Output: "Oct 29, 2016"
    """
    datetime = datetime[0 : datetime.find('T')]
    year, month, day = datetime.split('-')
    return "{} {}, {}".format(MONTH_NUM[int(month)-1], day, year)


#------------------------------------------------------------------------------
# FUNCTIONS

def log(var):
    print(var)


def load_data() -> (str, list):
    """ Opens the downloaded.json file and the api.json file
        @return: 2-tuple (API key, downloaded videos)
            API key: str
            downloaded: list(video IDs)
    """
    api_key = ''
    downloaded = []

    with open(API_FILE) as json_data:
        d = dict(json.load(json_data))
        api_key = d['api_key']

    with open(DOWNLOADED_FILE) as json_data:
        d = dict(json.load(json_data))
        downloaded = d['downloaded']

    return (api_key, downloaded)


def save_data(downloaded: list) -> None:
    """ Updates the download.json file with the given list(downloaded videos)
    """
    d = {'downloaded': downloaded}
    with open(DOWNLOADED_FILE, 'w') as file:
        json.dump(d, file)


def get_videos(api_key: str) -> [Video]:
    """ Returns a list of Videos from the standard playlist ordered ascending
        in upload date
    """
    url = 'https://www.googleapis.com/youtube/v3/playlistItems?'
    params = {
        'part':       'snippet',
        'maxResults': RESULTS_PER_REQUEST,
        'playlistId': PLAYLIST_ID,
        'key':        api_key
    }
    url += urlencode(params)
    json_data = requests.get(url).json()

    videos = []
    for video in json_data['items']:
        snippet = video['snippet']
        video_id = snippet['resourceId']['videoId']
        title = snippet['title']
        channel = snippet['channelTitle']
        date = format_date(snippet['publishedAt'])
        videos.append(Video(video_id, title, channel, date))

    return videos


def download_yt_video(video_id: str) -> None:
    """ Downloads the given YouTube URL using the standard config
    """
    url = 'https://www.youtube.com/watch?v=' + video_id
    print(url)
    with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
        ydl.download([url])


def process_videos(videos: [Video], downloaded: list) -> list:
    """ Downloads the given videos and adds them to the downloaded list
        @return: New list of downloaded videos
    """
    for v in videos:
        video_id = v.video_id
        if video_id not in downloaded:
            download_yt_video(video_id)
            downloaded.append(video_id)
        else:
            log("ERROR: " + video_id + " already downloaded.")
    return downloaded


def upload_to_gdrive(files: dict):
    pass


#------------------------------------------------------------------------------
# MAIN

if __name__ == '__main__':
    api_key, downloaded = load_data()
    videos = get_videos(api_key)
    downloaded = process_videos(videos, downloaded)
    save_data(downloaded)