###############################################################################
## IMPORTS

# Native
import json
from urllib.parse import urlencode
from collections import namedtuple
from os import rename

# 3rd party
import requests # http://docs.python-requests.org/
import youtube_dl # https://github.com/rg3/youtube-dl/
from mutagen.easyid3 import EasyID3

###############################################################################
## CONSTANTS

YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192'
    }]
}
# Add 'simulate': True to YDL_OPTIONS to prevent actually downloading videos

DOWNLOADED_FILE = 'downloaded.json'
API_FILE = 'api.json'
PLAYLIST_ID = 'PL8mG-RkN2uTw7PhlnAr4pZZz2QubIbujH'
RESULTS_PER_REQUEST = 2
MONTH_NUM = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept",
             "Oct", "Nov", "Dec"]


###############################################################################
## GLOBALS

Video = namedtuple('Video', 'video_id title channel date')


###############################################################################
## HELPERS

def log(var):
    print(var)


def format_date(datetime: str) -> str:
    """ Formats a datetime object generated by YouTube as a human-readable date

        Input:  "2016-10-29T20:27:45.000Z"
        Output: "Oct 29, 2016"
    """
    datetime = datetime[0 : datetime.find('T')]
    year, month, day = datetime.split('-')
    return "{} {}, {}".format(MONTH_NUM[int(month)-1], day, year)



def download_yt_video(video_id: str) -> None:
    """ Downloads the given YouTube URL using the global config
    """
    url = 'https://www.youtube.com/watch?v=' + video_id
    with youtube_dl.YoutubeDL(YDL_OPTIONS) as ydl:
        ydl.download([url])


def set_id3_tags(v: Video, filename: str) -> None:
    """ Sets the mp3 metadata for the given video to:
            Title:  Video title
            Artist: Channel
            Date:   Upload date
    """
    metadata = EasyID3(filename)

    metadata['title'] = v.title
    metadata['artist'] = v.channel
    metadata['originaldate'] = format_date(date)

    metadata.save()


def rename_file(v: Video, old_filename: str) -> None:
    """ Renames the file for the given video to the format:
        [Title].mp3
    """
    new_filename = "{}.mp3".format(v.title)
    rename(old_filename, new_filename)


###############################################################################
## FUNCTIONS


def load_data() -> (str, list):
    """ Opens the downloaded.json file and the api.json file
        @return: 2-tuple (API key, downloaded videos)
            API key: str
            downloaded: list(video IDs)
    """
    api_key = ''
    downloaded = []

    with open(API_FILE) as json_data:
        d = dict(json.load(json_data))
        api_key = d['api_key']

    with open(DOWNLOADED_FILE) as json_data:
        d = dict(json.load(json_data))
        downloaded = d['downloaded']

    return (api_key, downloaded)


def save_data(downloaded: list) -> None:
    """ Updates the download.json file with the given list of downloaded videos
    """
    d = {'downloaded': downloaded}
    with open(DOWNLOADED_FILE, 'w') as file:
        json.dump(d, file)


def get_videos(api_key: str) -> [Video]:
    """ @return: List of Videos from the standard playlist ordered ascending
        in upload date
    """
    url = 'https://www.googleapis.com/youtube/v3/playlistItems?'
    params = {
        'part':       'snippet',
        'maxResults': RESULTS_PER_REQUEST,
        'playlistId': PLAYLIST_ID,
        'key':        api_key
    }
    url += urlencode(params)
    json_data = requests.get(url).json()

    videos = []
    for video in json_data['items']:
        snippet = video['snippet']
        video_id = snippet['resourceId']['videoId']
        title = snippet['title']
        channel = snippet['channelTitle']
        date = snippet['publishedAt']
        videos.append(Video(video_id, title, channel, date))

    return videos


def process_videos(videos: [Video], downloaded: list) -> list:
    """ Processes the list of Video objects and updates the downloaded list

        - Downloads the given videos and adds them to the downloaded list
        - Sets the .mp3 metadata:
            Title:  Video title
            Artist: Channel
            Date:   Upload date
        - Renames the .mp3 file to the format:
            [title].mp3

        @return: New list of downloaded videos
    """
    for v in videos:
        video_id = v.video_id
        filename = '{}-{}.mp3'.format(v.title, v.video_id)
        # Filename is set to match the one generated by youtube_dl

        # Download
        if video_id not in downloaded:
            log("DOWNLOADING: " + v.title)
            download_yt_video(video_id)
            downloaded.append(video_id)
        else:
            log("SKIPPING: " + v.title + " (Already downloaded)")

        set_id3_tags(v, filename)
        rename_file(v, filename)

    return downloaded


def upload_to_gdrive(files: dict):
    pass


###############################################################################
## MAIN

if __name__ == '__main__':
    log("Initializing...")
    api_key, downloaded = load_data()
    videos = get_videos(api_key)
    downloaded = process_videos(videos, downloaded)
    save_data(downloaded)